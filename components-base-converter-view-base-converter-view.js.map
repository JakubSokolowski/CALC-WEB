{"version":3,"sources":["C:/Users/Jakub/WebstormProjects/calc/libs/calc-rs/pkg/index.js","C:/Users/Jakub/WebstormProjects/calc/libs/calc-rs/pkg/index_bg.js","./app/components/base-converter-view/base-converter-view.tsx","./app/components/base-converter/base-converter-component.tsx","./app/components/conversion-details/conversion-details.tsx","./app/components/conversion-details/fractional-conversion-row/fractional-conversion-row.tsx","./app/components/conversion-details/integral-conversion-row/integral-conversion-row.tsx","./app/components/conversion-details/result-equation/result-equation.tsx","./app/components/conversion-to-decimal/conversion-to-decimal.tsx"],"names":["lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","lmao","__wbg_log_0a1aa0920fe2d052","arg0","arg1","console","log","BaseConverterView","t","useTranslation","conversion","setConversion","useState","precision","setPrecision","classes","useConverterStyles","onChange","newConversion","value","setValue","React","handleChange","event","newValue","a11yProps","verticalSpacer","title","BaseConverterComponent","onConversionChange","showComplement","useSelector","selectShowComplement","showDecimalValue","selectShowDecimalValue","initialValues","inputStr","inputBase","outputBase","onSubmit","values","fromString","validateBase","base","BaseDigits","isValidRadix","minBase","MIN_BASE","maxBase","MAX_BASE","validateValueStr","valueStr","isValidString","validate","errors","clean","form","useFormik","inputValue","swap","setFieldValue","validateForm","getDecimal","useCallback","result","decimalValue","toString","e","getComplement","ComplementConverter","card","handleSubmit","input","row","horizontalSpacer","ConversionDetails","fractionalHoverGrid","fractionalPart","length","buildFractionalConversionGrid","undefined","integralHoverGrid","buildIntegralConversionGrid","floatingHoverPopover","hoverProps","integralHoverPopover","type","ConversionType","DIRECT","equation","getFirstStage","FractionalConversionRow","multiplier","digit","rest","split","fontWeight","IntegralConversionRow","dividend","remainder","ResultEquation","firstStage","lastStage","getStage","output","num","ConversionToDecimalDetails","conversionStage","digits","inputDigitList","map","index","arr","valueInBase","position","display"],"mappings":"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","file":"components-base-converter-view-base-converter-view.js","sourcesContent":["import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";","import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n*/\nexport function lmao() {\n    wasm.lmao();\n}\n\nexport const __wbg_log_0a1aa0920fe2d052 = function(arg0, arg1) {\n    console.log(getStringFromWasm0(arg0, arg1));\n};\n\n","import React, { FC, useState } from 'react';\r\nimport { Conversion } from '@calc/calc-arithmetic';\r\nimport { BaseConverterComponent } from '../base-converter/base-converter-component';\r\nimport { ConversionDetails } from '../conversion-details/conversion-details';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Box, Tab, Tabs, Typography } from '@material-ui/core';\r\nimport { a11yProps, TabPanel } from '@calc/ui';\r\nimport { DocPage } from '@calc/docs';\r\nimport { useConverterStyles } from '../../core/styles/converter-styles';\r\nimport { lmao } from '@calc/calc-rs';\r\n\r\nexport const BaseConverterView: FC = () => {\r\n    const { t } = useTranslation();\r\n    const [conversion, setConversion] = useState<Conversion>();\r\n    const [precision, setPrecision] = useState(5);\r\n    const classes = useConverterStyles();\r\n\r\n    const onChange = (newConversion: Conversion, precision: number) => {\r\n        if (newConversion) {\r\n            setConversion(newConversion);\r\n            setPrecision(precision);\r\n        }\r\n    };\r\n\r\n    lmao();\r\n\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Tabs value={value} onChange={handleChange}>\r\n                <Tab label=\"Converter\" {...a11yProps(0)} />\r\n                <Tab label=\"Theory\" {...a11yProps(1)} />\r\n            </Tabs>\r\n            <TabPanel value={value} index={0}>\r\n                <div className={classes.verticalSpacer}/>\r\n                <Typography variant={'h4'} className={classes.title}>\r\n                    {t('baseConverter.title')}\r\n                </Typography>\r\n                <BaseConverterComponent onConversionChange={onChange}/>\r\n                {conversion && <ConversionDetails conversion={conversion} precision={precision}/>}\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n                <div className={classes.verticalSpacer}/>\r\n                <Box display={'flex'} alignItems={'center'} maxWidth={900} margin={'auto'}>\r\n                    <DocPage path={'positional/base-conversion'}/>\r\n                </Box>\r\n            </TabPanel>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BaseConverterView;\r\n","import React, { FC, useCallback, useState } from 'react';\r\nimport { BaseDigits, ComplementConverter, Conversion, fromString, isValidString } from '@calc/calc-arithmetic';\r\nimport { SwapOutlined } from '@ant-design/icons/lib';\r\nimport { InputWithCopy } from '@calc/ui';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectShowComplement, selectShowDecimalValue } from '../../store/selectors/options.selectors';\r\nimport { ConversionOptions } from '../conversion-options/conversion-options';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Card, IconButton, TextField, Tooltip } from '@material-ui/core';\r\nimport { clean } from '@calc/utils';\r\nimport { useFormik } from 'formik';\r\nimport { FormErrors } from '../../core/models/form-errors';\r\nimport { useConverterStyles } from '../../core/styles/converter-styles';\r\n\r\ninterface P {\r\n    onConversionChange?: (conversion: Conversion, precision: number) => void;\r\n}\r\n\r\ninterface FormValues {\r\n    inputStr: string;\r\n    inputBase: number;\r\n    outputBase: number;\r\n    precision: number;\r\n}\r\n\r\nexport const BaseConverterComponent: FC<P> = ({ onConversionChange }) => {\r\n    const showComplement = useSelector(selectShowComplement);\r\n    const showDecimalValue = useSelector(selectShowDecimalValue);\r\n    const { t } = useTranslation();\r\n    const classes = useConverterStyles();\r\n\r\n    const initialValues: FormValues = {\r\n        inputStr: '123.45',\r\n        inputBase: 10,\r\n        outputBase: 2,\r\n        precision: 10\r\n    };\r\n\r\n    const onSubmit = (values: FormValues) => {\r\n        const { inputStr, inputBase, outputBase, precision } = values;\r\n        const conversion = fromString(inputStr, inputBase, outputBase);\r\n        onConversionChange(conversion, precision);\r\n    };\r\n\r\n    const validateBase = (base: number): string | undefined => {\r\n        if (!BaseDigits.isValidRadix(base)) {\r\n            return t(\r\n                'baseConverter.wrongBase',\r\n                { minBase: BaseDigits.MIN_BASE, maxBase: BaseDigits.MAX_BASE }\r\n            );\r\n        }\r\n    };\r\n\r\n    const validateValueStr = (valueStr: string, inputBase: number): string | undefined => {\r\n        if (!isValidString(valueStr, inputBase)) {\r\n            return t(\r\n                'baseConverter.wrongRepresentationStr',\r\n                { base: inputBase }\r\n            );\r\n        }\r\n    };\r\n\r\n    const validate = (values: FormValues) => {\r\n        const errors: FormErrors<FormValues> = {\r\n            inputBase: validateBase(values.inputBase),\r\n            outputBase: validateBase(values.outputBase),\r\n            inputStr: validateValueStr(values.inputStr, values.inputBase)\r\n        };\r\n\r\n        return clean(errors);\r\n    };\r\n\r\n    const form = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validate,\r\n    });\r\n\r\n    const [inputValue] = useState(initialValues.inputStr);\r\n    const [inputBase] = useState(initialValues.inputBase);\r\n\r\n    const swap = async () => {\r\n        const { inputBase, outputBase } = form.values;\r\n        form.setFieldValue('inputBase', outputBase);\r\n        form.setFieldValue('outputBase', inputBase);\r\n        await form.validateForm();\r\n    };\r\n\r\n    const getDecimal = useCallback(() => {\r\n        try {\r\n            if (inputBase === 10) return inputValue;\r\n            return fromString(\r\n                inputValue,\r\n                inputBase,\r\n                10\r\n            ).result.decimalValue.toString();\r\n        } catch (e) {\r\n            console.log(e);\r\n            return '0.0';\r\n        }\r\n    }, [inputBase, inputValue]);\r\n\r\n    const getComplement = useCallback(() => {\r\n        try {\r\n            return ComplementConverter.getComplement(\r\n                inputValue,\r\n                inputBase\r\n            ).toString();\r\n        } catch (e) {\r\n            console.log(e);\r\n            return '0.0';\r\n        }\r\n    }, [inputBase, inputValue]);\r\n\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <ConversionOptions/>\r\n            <form onSubmit={form.handleSubmit}>\r\n                <InputWithCopy\r\n                    className={classes.input}\r\n                    name={'inputStr'}\r\n                    id={'inputStr'}\r\n                    label={t('baseConverter.inputNumber')}\r\n                    error={!!form.errors.inputStr}\r\n                    helperText={form.errors.inputStr}\r\n                    onChange={form.handleChange}\r\n                    value={form.values.inputStr}\r\n                />\r\n\r\n                {\r\n                    showDecimalValue &&\r\n                    <InputWithCopy\r\n                        className={classes.input}\r\n                        label={t('baseConverter.inputDecimalValue')}\r\n                        readOnly\r\n                        value={getDecimal()}\r\n                    />\r\n                }\r\n\r\n                {\r\n                    showComplement &&\r\n                    <InputWithCopy\r\n                        className={classes.input}\r\n                        label={t('baseConverter.inputComplement')}\r\n                        readOnly\r\n                        value={getComplement()}\r\n                    />\r\n                }\r\n\r\n                <div className={classes.row}>\r\n                    <TextField\r\n                        className={classes.inputBase}\r\n                        variant={'outlined'}\r\n                        name={'inputBase'}\r\n                        id={'inputBase'}\r\n                        label={t('baseConverter.inputBase')}\r\n                        error={!!form.errors.inputBase}\r\n                        helperText={form.errors.inputBase}\r\n                        onChange={form.handleChange}\r\n                        value={form.values.inputBase}\r\n                    />\r\n                    <Tooltip title={t('baseConverter.swapBases')}>\r\n                        <IconButton  onClick={swap}>\r\n                            <SwapOutlined/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <TextField\r\n                        className={classes.outputBase}\r\n                        variant={'outlined'}\r\n                        name={'outputBase'}\r\n                        id={'outputBase'}\r\n                        label={t('baseConverter.outputBase')}\r\n                        error={!!form.errors.outputBase}\r\n                        helperText={form.errors.outputBase}\r\n                        onChange={form.handleChange}\r\n                        value={form.values.outputBase}\r\n                    />\r\n                    <div className={classes.horizontalSpacer}/>\r\n                    <TextField\r\n                        className={classes.precision}\r\n                        variant={'outlined'}\r\n                        name={'precision'}\r\n                        id={'precision'}\r\n                        label={t('baseConverter.precision')}\r\n                        error={!!form.errors.precision}\r\n                        helperText={form.errors.precision}\r\n                        onChange={form.handleChange}\r\n                        value={form.values.precision}\r\n                    />\r\n                    <div className={classes.horizontalSpacer}/>\r\n                    <Button color={'secondary'} variant={'contained'} type={'submit'}>\r\n                        {t('baseConverter.convert')}\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Conversion, ConversionToDecimal, ConversionType } from '@calc/calc-arithmetic';\r\nimport { buildFractionalConversionGrid, buildIntegralConversionGrid, HoverGrid } from '@calc/grid';\r\nimport { ResultEquation } from './result-equation/result-equation';\r\nimport { IntegralConversionRow } from './integral-conversion-row/integral-conversion-row';\r\nimport { ConversionToDecimalDetails } from '../conversion-to-decimal/conversion-to-decimal';\r\nimport { FractionalConversionRow } from './fractional-conversion-row/fractional-conversion-row';\r\nimport { InputWithCopy } from '@calc/ui';\r\nimport { Card, Typography } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useConverterStyles } from '../../core/styles/converter-styles';\r\n\r\ninterface P {\r\n    conversion: Conversion;\r\n    precision: number;\r\n}\r\n\r\nexport const ConversionDetails: FC<P> = ({ conversion, precision }) => {\r\n    const { t } = useTranslation();\r\n    const classes = useConverterStyles();\r\n\r\n    const fractionalHoverGrid = conversion.result.fractionalPart.length > 0\r\n        ? buildFractionalConversionGrid(conversion, precision)\r\n        : undefined;\r\n\r\n\r\n    const integralHoverGrid = buildIntegralConversionGrid(conversion);\r\n\r\n    const floatingHoverPopover = (hoverProps) => {\r\n        return <FractionalConversionRow {...hoverProps}/>;\r\n    };\r\n\r\n    const integralHoverPopover = (hoverProps) => {\r\n        return <IntegralConversionRow {...hoverProps}/>;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant={'h4'} className={classes.title}>\r\n                {t('baseConverter.result')}\r\n            </Typography>\r\n            <Card className={classes.card}>\r\n                <div id=\"integral-conversion-details\">\r\n                    <InputWithCopy\r\n                        readOnly\r\n                        className={classes.input}\r\n                        label={t('baseConverter.outputNumber')}\r\n                        value={conversion.result.toString(precision)}\r\n                    />\r\n                    {\r\n                        conversion.type === ConversionType.DIRECT ?\r\n                            <div className={classes.equation}>\r\n                                <Typography>{`I. ${t('baseConverter.conversionToBase', { base: conversion.result.base })}`}</Typography>\r\n                                <ResultEquation conversion={conversion} firstStage={0} lastStage={0}/>\r\n                            </div> :\r\n                            <div>\r\n                                <div className={classes.equation}>\r\n                                    <Typography>{`I. ${t('baseConverter.conversionToDecimal')}`}</Typography>\r\n                                    <ConversionToDecimalDetails\r\n                                        conversionStage={conversion.getFirstStage() as ConversionToDecimal}/>\r\n                                </div>\r\n                                <div className={classes.equation}>\r\n                                    <Typography>{`II. ${t('baseConverter.conversionToBase', { base: conversion.result.base })}`}</Typography>\r\n                                    <ResultEquation conversion={conversion} firstStage={1} lastStage={1}/>\r\n                                </div>\r\n                            </div>\r\n                    }\r\n                    <div className={classes.row}>\r\n                        {\r\n                            integralHoverGrid &&\r\n                            <HoverGrid\r\n                                {...integralHoverGrid}\r\n                                title={t('baseConverter.integralConversion')}\r\n                                groupBuilder={integralHoverPopover}\r\n                            />\r\n                        }\r\n                        <div className={classes.horizontalSpacer}/>\r\n                        {\r\n                            fractionalHoverGrid &&\r\n                            <HoverGrid\r\n                                {...fractionalHoverGrid}\r\n                                title={t('baseConverter.floatingConversion')}\r\n                                groupBuilder={floatingHoverPopover}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { FloatingPartConversionInfo } from '@calc/grid';\r\n\r\nexport const FractionalConversionRow: FC<FloatingPartConversionInfo> = ({ result, multiplier, base }) => {\r\n    const [digit, rest] = result.split('.');\r\n    return (\r\n        <div>\r\n            <div>\r\n                {`${multiplier} * ${base} = `}\r\n                <span style={{ fontWeight: 'bold' }}>\r\n                    {digit}.\r\n                </span>\r\n                {rest}\r\n            </div>\r\n            <div>\r\n                {`${result} % 1 = 0.${rest}`}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { RowConversionOperation } from '@calc/grid';\r\n\r\nexport const IntegralConversionRow: FC<RowConversionOperation> = ({result, base, dividend, remainder}) => {\r\n    return (\r\n      <div>\r\n          {`${dividend} / ${base} = ${result} r `}\r\n          <span style={{fontWeight: 'bold'}}>\r\n              {remainder}\r\n          </span>\r\n      </div>\r\n    );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Conversion } from '@calc/calc-arithmetic';\r\nimport { NumberSubscript } from '@calc/ui';\r\n\r\ninterface P {\r\n    conversion: Conversion;\r\n    firstStage: number;\r\n    lastStage: number;\r\n}\r\n\r\nexport const ResultEquation: FC<P> = ({ conversion, firstStage, lastStage }) => {\r\n    if (!conversion) return null;\r\n\r\n    const input = conversion.getStage(firstStage);\r\n    const output = conversion.getStage(lastStage);\r\n\r\n    const [num, base] = input.input;\r\n    return (\r\n        <span>\r\n            <NumberSubscript value={num} subscript={base}/>\r\n            &nbsp;=&nbsp;\r\n            <NumberSubscript value={output.result.toString()} subscript={output.result.base}/>\r\n        </span>\r\n    );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { ConversionToDecimal } from '@calc/calc-arithmetic';\r\nimport { NumberSubscript } from '@calc/ui';\r\n\r\ninterface P {\r\n    conversionStage: ConversionToDecimal;\r\n}\r\n\r\nexport const ConversionToDecimalDetails: FC<P> = ({ conversionStage }) => {\r\n    const [inputStr, inputBase] = conversionStage.input;\r\n\r\n    const digits = conversionStage.inputDigitList.map((digit, index, arr) => {\r\n        return (\r\n            <span key={index}>\r\n                {digit.valueInBase}*\r\n                {digit.base}\r\n                <sup>{digit.position}</sup>\r\n                {index !== arr.length -1 && ' + '}\r\n            </span>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"decimal-conversion-details\" style={{ display: 'inline-block' }}>\r\n                <NumberSubscript value={inputStr} subscript={inputBase}/>\r\n                &nbsp;=&nbsp;\r\n                {digits}\r\n                &nbsp;=&nbsp;\r\n                <NumberSubscript value={conversionStage.result.valueInBase} subscript={conversionStage.result.base}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"sourceRoot":"webpack:///"}